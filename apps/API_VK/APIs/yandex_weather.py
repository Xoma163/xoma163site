import requests

from xoma163site.settings import BASE_DIR


def get_weather(city="—Å–∞–º–∞—Ä–∞"):
    if city == "—Å–∞–º–∞—Ä–∞":
        city_name = "–°–∞–º–∞—Ä–µ"
        lat = 53.212273
        lon = 50.169435
    elif city in ['–ø–∏—Ç–µ—Ä', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥', '–ø–∏—Ç–µ—Ä–µ', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥–µ', '—Å–ø–±']:
        city_name = "–ü–∏—Ç–µ—Ä–µ"
        lat = 59.939095
        lon = 30.315868
    elif city in ['—Å—ã–∑—Ä–∞–Ω—å', '—Å—ã–∑—Ä–∞–Ω–∏']:
        city_name = "–°—ã–∑—Ä–∞–Ω–∏"
        lat = 53.155782
        lon = 48.474485
    elif city in ['–ø—Ä–∏–±–æ–π', '–ø—Ä–∏–±–æ–µ']:
        city_name = "–ü—Ä–∏–±–æ–µ"
        lat = 52.8689435
        lon = 49.6516931
    elif city in ['–∫—É–ø—á–∏–Ω–æ']:
        city_name = "–ö—É–ø—á–∏–Ω–æ"
        lat = 59.872380
        lon = 30.370291
    else:
        return '–Ø –Ω–µ –∑–Ω–∞—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–æ–¥–∞ {}. –°–æ–æ–±—â–∏—Ç–µ –∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É'.format(city)

    f = open(BASE_DIR + "/secrets/yandex_weather.txt")
    TOKEN = f.readline().strip()
    f.close()

    URL = "https://api.weather.yandex.ru/v1/informers?lat={}&lon={}&lang=ru_RU".format(lat, lon)
    HEADERS = {'X-Yandex-API-Key': TOKEN}
    result = requests.get(URL, headers=HEADERS).json()
    if 'status' in result:
        if result['status'] == 403:
            return "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —è –∏—Å—á–µ—Ä–ø–∞–ª –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Yandex Weather :("
    WEATHER_TRANSLATE = {
        'clear': '–Ø—Å–Ω–æ ‚òÄ',
        'partly-cloudy': '–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ ‚õÖ',
        'cloudy': '–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ üå•',
        'overcast': '–ü–∞—Å–º—É—Ä–Ω–æ ‚òÅ',
        'partly-cloudy-and-light-rain': '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üåß',
        'partly-cloudy-and-rain': '–î–æ–∂–¥—å üåß',
        'overcast-and-rain': '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåßüåß',
        'overcast-thunderstorms-with-rain': '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å, –≥—Ä–æ–∑–∞ üå©',
        'cloudy-and-light-rain': '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üåß',
        'overcast-and-light-rain': '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üåß',
        'cloudy-and-rain': '–î–æ–∂–¥—å üåß',
        'overcast-and-wet-snow': '–î–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º üå®',
        'partly-cloudy-and-light-snow': '–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ üå®',
        'partly-cloudy-and-snow': '–°–Ω–µ–≥ üå®',
        'overcast-and-snow': '–°–Ω–µ–≥–æ–ø–∞–¥ üå®',
        'cloudy-and-light-snow': '–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ üå®',
        'overcast-and-light-snow': '–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ üå®',
        'cloudy-and-snow': '–°–Ω–µ–≥ üå®'}
    DAY_TRANSLATE = {
        'night': '–Ω–æ—á—å',
        'morning': '—É—Ç—Ä–æ',
        'day': '–¥–µ–Ω—å',
        'evening': '–≤–µ—á–µ—Ä',
    }

    weather = {
        'now': {
            'temp': result['fact']['temp'],
            'temp_feels_like': result['fact']['feels_like'],
            'condition': WEATHER_TRANSLATE[result['fact']['condition']],
            'wind_speed': result['fact']['wind_speed'],
            'wind_gust': result['fact']['wind_gust'],
            'pressure': result['fact']['pressure_mm'],
            'humidity': result['fact']['humidity'],
        },
        'forecast': {}}

    for i in range(len(result['forecast']['parts'])):
        weather['forecast'][i] = {
            'part_name': DAY_TRANSLATE[result['forecast']['parts'][i]['part_name']],
            'temp_min': result['forecast']['parts'][i]['temp_min'],
            'temp_max': result['forecast']['parts'][i]['temp_max'],
            'temp_feels_like': result['forecast']['parts'][i]['feels_like'],
            'condition': WEATHER_TRANSLATE[result['forecast']['parts'][i]['condition']],
            'wind_speed': result['forecast']['parts'][i]['wind_speed'],
            'wind_gust': result['forecast']['parts'][i]['wind_gust'],
            'pressure': result['forecast']['parts'][i]['pressure_mm'],
            'humidity': result['forecast']['parts'][i]['humidity'],
            'prec_mm': result['forecast']['parts'][i]['prec_mm'],
            'prec_period': int(int(result['forecast']['parts'][i]['prec_period']) / 60),
            'prec_prob': result['forecast']['parts'][i]['prec_prob'],
        }

    now = '–ü–æ–≥–æ–¥–∞ –≤ {} —Å–µ–π—á–∞—Å:\n' \
          '{}\n' \
          '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {}¬∞–°(–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {}¬∞–°)\n' \
          '–í–µ—Ç–µ—Ä {}–º/c(–ø–æ—Ä—ã–≤—ã –¥–æ {}–º/c)\n' \
          '–î–∞–≤–ª–µ–Ω–∏–µ  {}–º–º.—Ä—Ç.—Å—Ç., –≤–ª–∞–∂–Ω–æ—Å—Ç—å {}%'.format(city_name,
                                                        weather['now']['condition'], weather['now']['temp'],
                                                        weather['now']['temp_feels_like'],
                                                        weather['now']['wind_speed'], weather['now']['wind_gust'],
                                                        weather['now']['pressure'],
                                                        weather['now']['humidity'])

    forecast = ""
    for i in range(len(weather['forecast'])):
        forecast += '\n\n' \
                    '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {}:\n' \
                    '{}\n'.format(
            weather['forecast'][i]['part_name'],
            weather['forecast'][i]['condition'])

        if weather['forecast'][i]['temp_min'] != weather['forecast'][i]['temp_max']:
            forecast += '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç {} –¥–æ {}¬∞–°'.format(weather['forecast'][i]['temp_min'],
                                                           weather['forecast'][i]['temp_max'])
        else:
            forecast += '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {}¬∞–°'.format(weather['forecast'][i]['temp_max'])

        forecast += '(–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {}¬∞–°)\n' \
                    '–í–µ—Ç–µ—Ä {}–º/c(–ø–æ—Ä—ã–≤—ã –¥–æ {}–º/c)\n' \
                    '–î–∞–≤–ª–µ–Ω–∏–µ {} –º–º.—Ä—Ç.—Å—Ç., –≤–ª–∞–∂–Ω–æ—Å—Ç—å {}%\n'.format(weather['forecast'][i]['temp_feels_like'],
                                                                    weather['forecast'][i]['wind_speed'],
                                                                    weather['forecast'][i]['wind_gust'],
                                                                    weather['forecast'][i]['pressure'],
                                                                    weather['forecast'][i]['humidity']
                                                                    )
        if weather['forecast'][i]['prec_mm'] != 0:
            forecast += '–û—Å–∞–¥–∫–∏ {}–º–º –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ {} —á–∞—Å–æ–≤ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {}%'.format(
                weather['forecast'][i]['prec_mm'],
                weather['forecast'][i]['prec_period'],
                weather['forecast'][i]['prec_prob'])
        else:
            forecast += "–ë–µ–∑ –æ—Å–∞–¥–∫–æ–≤"
    return now + forecast
